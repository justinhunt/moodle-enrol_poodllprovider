{"version":3,"sources":["../src/mform.js"],"names":["define","$","ModalFactory","ModalEvents","Ajax","Notification","Y","Event","Str","Fragment","MForm","data","init","prototype","modal","requiredStrings","key","component","module","get_strings","then","str","create","type","types","SAVE_CANCEL","title","body","triggerElement","bind","setBody","getBody","contextid","cmid","formdata","setLarge","getRoot","on","hidden","destroy","resetDirtyFormState","shown","append","save","submitForm","submitFormAjax","show","fail","exception","params","jsonformdata","JSON","stringify","loadFragment","onSubmitSuccess","response","onValidationError","onSubmitError","use","M","core_formchangechecker","reset_form_dirty_state","validateElements","notifyFormSubmitAjax","find","invalid","merge","length","first","focus","disableButtons","getFooter","attr","enableButtons","removeAttr","e","preventDefault","changeEvent","document","createEvent","initEvent","each","index","element","dispatchEvent","formData","serialize","call","methodname","args","itemnumber","done","handleFormSubmissionResponse","handleFormSubmissionFailure","hide","submit"],"mappings":"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","sourcesContent":["/**\n * LTI Provider.\n *\n * @module     enrol_poodllprovider/mform\n * @class      LTI Provider\n * @package    enrol_poodllprovider\n * @copyright  2020 Michael Gardener <mgardener@cissq.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/ajax',\n    'core/notification',\n    'core/yui',\n    'core/event',\n    'core/str',\n    'core/fragment',\n], function($, ModalFactory, ModalEvents, Ajax, Notification, Y, Event, Str, Fragment) {\n    /**\n     * Constructor\n     *\n     * @param {Object} data used to find triggers for the new group modal.\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var MForm = function(data) {\n        this.data = data;\n        this.init();\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    MForm.prototype.modal = null;\n\n    /**\n     * @var {Object} data\n     */\n    MForm.prototype.data = {};\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    MForm.prototype.init = function() {\n        var requiredStrings = [\n            {key: 'pluginname', component: this.data.module},\n        ];\n\n        Str.get_strings(requiredStrings)\n            .then(function(str) {\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: str[0],\n                    body: ''\n                }, this.data.triggerElement);\n            }.bind(this))\n            .then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We need to make sure that the modal already exists when we render the form. Some form elements\n                // such as date_selector inspect the existing elements on the page to find the highest z-index.\n                this.modal.setBody(this.getBody(this.data.contextid, this.data.module, this.data.cmid, this.data.formdata));\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.destroy();\n                    this.resetDirtyFormState();\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                this.modal.show();\n                return this.modal;\n            }.bind(this))\n            .fail(Notification.exception);\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    MForm.prototype.getBody = function(contextid, module, cmid, formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        var params = {\n            cmid: cmid,\n            jsonformdata: JSON.stringify(formdata)\n        };\n        return Fragment.loadFragment('enrol_poodllprovider', module + '_form', contextid, params);\n    };\n\n    /**\n     * On form submit. Caller may override\n     *\n     * @param {Object} response Response received from the form's \"process\" method\n     * @return {Object}\n     */\n    MForm.prototype.onSubmitSuccess = function(response) {\n        // By default this function does nothing. Return here is irrelevant, it is only present to make eslint happy.\n        return response;\n    };\n\n    /**\n     * On form validation error. Caller may override\n     *\n     * @return {mixed}\n     */\n    MForm.prototype.onValidationError = function() {\n        // By default this function does nothing. Return here is irrelevant, it is only present to make eslint happy.\n        return undefined;\n    };\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    MForm.prototype.onSubmitError = function(exception) {\n        Notification.exception(exception);\n    };\n\n    /**\n     * Reset \"dirty\" form state (warning if there are changes)\n     */\n    MForm.prototype.resetDirtyFormState = function() {\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n    };\n\n    /**\n     * Validate form elements\n     * @return {boolean} true if client-side validation has passed, false if there are errors\n     */\n    MForm.prototype.validateElements = function() {\n        Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0]);\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        var invalid = $.merge(\n            this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n            this.modal.getRoot().find('.error')\n        );\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    };\n\n    /**\n     * Disable buttons during form submission\n     */\n    MForm.prototype.disableButtons = function() {\n        this.modal.getFooter().find('[data-action]').attr('disabled', true);\n    };\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    MForm.prototype.enableButtons = function() {\n        this.modal.getFooter().find('[data-action]').removeAttr('disabled');\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    MForm.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!this.validateElements()) {\n            return;\n        }\n        this.disableButtons();\n\n        var changeEvent = document.createEvent('HTMLEvents');\n        changeEvent.initEvent('change', true, true);\n\n        // Prompt all inputs to run their validation functions.\n        // Normally this would happen when the form is submitted, but\n        // since we aren't submitting the form normally we need to run client side\n        // validation.\n        this.modal.getRoot().find(':input').each(function(index, element) {\n            element.dispatchEvent(changeEvent);\n        });\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        Ajax.call([{\n            methodname: 'enrol_poodllprovider_manage_course_module',\n            args: {\n                contextid: this.data.contextid,\n                itemnumber: this.data.itemnumber,\n                cmid: this.data.cmid,\n                jsonformdata: JSON.stringify(formData)\n            },\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    MForm.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        this.resetDirtyFormState();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    MForm.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    MForm.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    return MForm;\n});"],"file":"mform.min.js"}